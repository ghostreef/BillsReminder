<% content_for(:body_attributes) do %>
  data-no-turbolink="true"
<% end %>

<div class='filters'>
  <%= label_tag(:amount, 'Filter:', class: 'inline_label')%>
  <%= text_field_tag(:amount, '', class: 'js-amount amount_text', readonly: true) %>
  <button class='js-update'>Update</button>

  <%= form_tag('', method: 'get', enforce_utf8: false, class: 'inline') do %>
    <% inverse = @attribute == 'popularity' ? 'total' : 'popularity' %>
    <%= hidden_field_tag :graph_by,  inverse %>
    <%= submit_tag 'Graph By ' + inverse, name: '' %>
  <% end %>
</div>

<div class='js-slider_range slider_range'></div>

<svg></svg>

<link rel="stylesheet" href="//code.jquery.com/ui/1.11.4/themes/smoothness/jquery-ui.css">

<script type="text/javascript">
  
  function is_node_between(node) {
    var values = $('.js-slider_range').slider('values');
    var min = values[0];
    var max = values[1];

    return ((node.value >= min) && (node.value <= max));
  }
  
  function getRandomColor() {
    var letters = '0123456789ABCDEF'.split('');
    var color = '#';
    for (var i = 0; i < 6; i++) {
      color += letters[Math.floor(Math.random() * 16)];
    }
    return color;
  }


  function draw(data) {

    // d3 set up
    var diameter = 800;
    var format = d3.format("<%= @attribute == 'total' ? '$,.2f' : ',' %>");

    var bubble = d3.layout.pack()
      .sort(null)
      .size([diameter, diameter])
      .padding(1.5);


    // select svg, data join
    var nodes = d3.select("svg").attr("width", diameter).attr("height", diameter).attr("class", "bubbles")
      .selectAll('g')
      .data(bubble.nodes(data).filter(function (d) { return !d.children; }));


    // enter selection
    var gs = nodes.enter().append("g");
    gs.append("title");
    gs.append("circle").style("fill", function(d) { return getRandomColor(); });
    gs.append("text");


    // update selection
    nodes.attr("transform", function (d) { return "translate(" + d.x + "," + d.y + ")"; });

    nodes.select('circle').transition().duration(1000).attr("r", function(d) { return d.r; });

    nodes.select('title').text(function (d) { return d.name + ": " + format(d.value); });

    nodes.select('text')
      .attr("dy", ".3em")
      .style("text-anchor", "middle")
      .text(function (d) { return d.name.substring(0, d.r / 3); });


    // exit selection
    nodes.exit().remove();
  }


  function update() {
    var c = data.children.filter(is_node_between);
    draw({"children":c});

  }


  var data = <%== @data.to_json %>;

  window.onload = draw(data);

  d3.select('.js-update').on('click', update);



  $(document).ready(function () {

    $('.js-slider_range').slider({
      range: true,
      min: <%= @min %>,
      max: <%= @max %>,
      values: [<%= @min %>, <%= @max_standard %>],
      slide: function (event, ui) {
        $(".js-amount").val("$" + ui.values[0] + " - $" + ui.values[1]);
      }
    });

    // init price range input field
    var values = $('.js-slider_range').slider('values');
    var min = values[0];
    var max = values[1];

    $('.js-amount').val("$" + min + " - $" + max);
    $('.js-update').click();
  });
  
</script>